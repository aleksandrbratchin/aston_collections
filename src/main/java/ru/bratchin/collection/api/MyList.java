package ru.bratchin.collection.api;

/**
 * MyList - это пользовательский интерфейс списка, который поддерживает индексы с использованием int.
 * Он предоставляет методы для добавления, получения, удаления элементов, очистки коллекции и сортировки списка.
 *
 * @param <E> тип элементов в этом списке
 */
public interface MyList<E> {

    /**
     * Добавляет элемент в конец списка.
     *
     * @param element элемент для добавления в список
     * @throws OutOfMemoryError          если класс указанного элемента не позволяет добавить его в этот
     *                                   список из-за ограничения на максимально возможный размер
     * @throws IndexOutOfBoundsException если индекс выходит за пределы допустимого диапазона
     */
    void add(E element);

    /**
     * Вставляет элемент в указанную позицию в списке.
     *
     * @param index   индекс, по которому следует вставить элемент
     * @param element элемент для добавления в список
     * @throws OutOfMemoryError          если класс указанного элемента не позволяет добавить его в этот
     *                                   список из-за ограничения на максимально возможный размер
     * @throws IndexOutOfBoundsException если индекс выходит за пределы допустимого диапазона
     */
    void add(int index, E element);

    /**
     * Возвращает элемент, находящийся в указанной позиции в списке.
     *
     * @param index индекс элемента для получения
     * @return элемент в указанной позиции
     * @throws IndexOutOfBoundsException если индекс выходит за пределы допустимого диапазона
     */
    E get(int index);

    /**
     * Удаляет элемент в указанной позиции в списке.
     *
     * @param index индекс элемента для удаления
     * @return удаленный элемент
     * @throws IndexOutOfBoundsException если индекс выходит за пределы допустимого диапазона
     */
    E remove(int index);

    /**
     * Удаляет все элементы из списка. После вызова этого метода список будет пустым.
     */
    void clear();

    /**
     * Сортирует список, используя естественный порядок его элементов.
     *
     * @return отсортированный список
     * @throws ClassCastException если элементы списка не реализуют интерфейс Comparable
     */
    MyList<E> sort();

    /**
     * Возвращает количество элементов в списке.
     *
     * @return количество элементов в списке
     */
    int size();

    /**
     * Возвращает true, если список не содержит элементов.
     *
     * @return true, если список пуст; false в противном случае
     */
    boolean isEmpty();
}
